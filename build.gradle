//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrDeprecatedAPIUsage
plugins {
	id "dev.architectury.loom" version "1.0-SNAPSHOT" apply false
	id 'maven-publish'
}

apply plugin: "dev.architectury.loom"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	forge {
		mixinConfig "$projectDir/src/main/resources/ruined_equipment.mixins.json"

		dataGen {
			mod mod_id
		}
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	// In this example, we need the following maven to satisfy
	// our dependency for Just Enough Items.
	maven {
		name = "Progwml6 (Just Enough Items)"
		url = "https://dvs1.progwml6.com/files/maven/"
	}

	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
	// to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// choose what mappings you want to use here
	// leave this uncommented if you want to use mojang's official mappings
	//mappings minecraft.officialMojangMappings()

	// uncomment this if you want to use yarn mappings
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// uncomment this if you want to use mcp mappings
	//mappings "de.oceanlabs.mcp:mcp_${project.mcp_channel}:${project.mcp_mappings}"

	// your forge dependency, this is **required** when using Forge Loom in forge mode!
	forge "net.minecraftforge:forge:${project.forge_version}"

	// additional dependencies can be specified using loom's regular format
	// specifying a "mod" dependency (like modImplementation or modApi)
	// will cause loom to remap the file to your specified mappings

	// in this example, we'll be adding JEI as a dependency
	// according to their developer example on GitHub
	// see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
	// compile against the JEI API but do not include it at runtime
	// don't worry about loom "not finding a forge mod" here,
	// JEI's api just doesn't have any class with an @Mod annotation

	modApi("me.shedaniel.cloth:cloth-config-forge:6.2.57")
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
	// define properties that can be used during resource processing
	inputs.property "version", project.version

	// this will replace the property "${version}" in your mods.toml
	// with the version you've defined in your gradle.properties
	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}

	// add some additional metadata to the jar manifest
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Mixin-Configs"           : "ruined_equipment.mixins.json"
		])
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
